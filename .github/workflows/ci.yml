name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: ["opened", "synchronize", "reopened"]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONUNBUFFERED: "1"
  PYTHONIOENCODING: "utf-8"
  PYTHONUTF8: "1"
  TZ: "UTC"
  CI: "1"
  ORION_TOKEN: "TEST_TOKEN"
  STATLINE_ENV: "test"
  SKIP_LIVE_SHEETS: "1"

defaults:
  run:
    shell: bash

jobs:
  ruff:
    name: Ruff (lint)
    runs-on: ubuntu-latest
    timeout-minutes: 7
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"

      # uv needs a venv before `uv pip` / `uv run`
      - name: Create venv
        run: uv venv --python 3.12

      - name: Cache ruff
        uses: actions/cache@v4
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml', '.ruff.toml', 'ruff.toml') }}

      - name: Install ruff
        run: uv pip install ruff

      # Non-blocking lint: auto-fix imports and other fixables, annotate, but don't fail the job
      - name: Ruff autofix + annotate (non-blocking)
        run: |
          uv run ruff check . --fix --unsafe-fixes --output-format=github --exit-zero
          uv run ruff format .

      # To enforce later, delete the step above and use this instead:
      # - name: Ruff (gating)
      #   run: uv run ruff check . --fix

  mypy:
    name: Mypy (type check)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python 3.12
      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ hashFiles('pyproject.toml', '**/*.py') }}
      - run: uv pip install -e ".[dev]" mypy
      - run: uv run mypy --strict --ignore-missing-imports .

  tests:
    name: Tests (${{ matrix.os }} / py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Create venv
        run: uv venv --python ${{ matrix.python }}
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ${{ runner.os == 'Windows' && format('{0}\\uv\\cache', runner.temp) || '' }}
          key: uv-${{ runner.os }}-py${{ matrix.python }}-${{ hashFiles('pyproject.toml') }}
      - name: Install
        run: uv pip install -e ".[dev,sheets]" pytest pytest-cov
      - name: Prepare test results dir
        run: mkdir -p test-results
      - name: Run tests
        run: |
          uv run pytest -ra \
            --maxfail=1 \
            --durations=10 \
            --cov=statline \
            --cov-report=xml \
            --junitxml=test-results/junit.xml
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python }}
          path: |
            test-results/junit.xml
            coverage.xml
          if-no-files-found: warn
      - name: PR coverage summary
        if: always() && github.event_name == 'pull_request'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both

  build:
    name: Build (Ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ruff, mypy, tests]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python 3.12
      - run: uv pip install build
      - name: Build sdist & wheel
        run: uv run python -m build
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-ubuntu
          path: dist/*

  smoke:
    name: Install & Smoke (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python 3.12
      - name: Download built wheel
        uses: actions/download-artifact@v4
        with:
          name: dist-ubuntu
          path: dist
      - name: Install wheel
        run: uv pip install --no-deps dist/*.whl
      - name: Import package
        run: |
          uv run python - <<'PY'
          import importlib
          importlib.import_module("statline")
          print("Import OK")
          PY
      - name: Adapters should exist
        run: |
          uv run python - <<'PY'
          from statline.core.adapters import list_names
          n = list_names()
          assert isinstance(n, list) and n, "No adapters discovered"
          print("Adapters:", n)
          PY
      - name: "CLI smoke: score example file if present"
        run: |
          EXAMPLE=$(uv run python - <<'PY'
          from importlib.resources import files
          p = files("statline.data") / "example.yaml"
          try:
            print(str(p) if p.is_file() else "", end="")
          except Exception:
            print("", end="")
          PY
          )
          if [ -n "$EXAMPLE" ]; then
            echo "Scoring $EXAMPLE"
            uv run python -m statline.cli score --file "$EXAMPLE" || uv run statline score --file "$EXAMPLE" || true
          else
            echo "No packaged example.yaml; skipping."
          fi
