name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  ruff:
    name: Ruff (lint)
    runs-on: ubuntu-latest
    timeout-minutes: 7
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Cache Ruff
        uses: actions/cache@v4
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml', '.ruff.toml', 'ruff.toml') }}
      - run: uv pip install ruff
      # Uncomment to fail on formatting drift:
      # - run: uv run ruff format --check .
      - run: uv run ruff check .

  mypy:
    name: Mypy (typecheck)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ hashFiles('pyproject.toml', '**/*.py') }}
      - run: uv pip install -e ".[dev]" mypy
      - run: uv run mypy --strict --ignore-missing-imports .

  tests:
    name: Tests (${{ matrix.os }} / py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-py${{ matrix.python }}-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
      - run: uv pip install -e ".[dev]" pytest pytest-cov
      - name: Run tests
        run: |
          uv run pytest -ra \
                        --maxfail=1 \
                        --durations=10 \
                        --cov=statline \
                        --cov-report=xml \
                        --junitxml=test-results/junit.xml
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python }}
          path: |
            test-results/junit.xml
            coverage.xml
          if-no-files-found: warn
      - name: PR coverage summary
        if: always() && github.event_name == 'pull_request'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both

  build-and-smoke:
    name: Build & Smoke (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 12
    needs: [ruff, mypy, tests]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-py3.12-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
      - run: uv pip install build
      - name: Build sdist & wheel
        run: uv run python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/*
      - name: Smoke install from wheel
        run: |
          uv pip install --no-deps dist/*.whl
          uv run python - <<'PY'
          import importlib
          importlib.import_module("statline")
          from statline.core.adapters import list_names
          names = list_names()
          assert isinstance(names, list) and names, "No adapters discovered"
          print("Adapters:", names)
          print("Smoke OK")
          PY
